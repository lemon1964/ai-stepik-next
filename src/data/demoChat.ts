// ai-chat-next/src/data/demoChat.ts

export const demoCategories = [
  { id: "humor", name: "AI & –ö–æ—Ñ–µ" },
  { id: "images", name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ò—Å—Ç–æ—Ä–∏–∏" },
  { id: "code", name: "–ö–æ–¥ & –ú–∞–≥–∏—è" },
];

export const demoCategoryIds = demoCategories.map(cat => cat.id);

  export const demoMessages: Record<string, Message[]> = {
  humor: [
    {
      id: "h1",
      prompt: "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–∞–∫, –±—É–¥—Ç–æ —è ‚Äî –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞",
      answers: [{
        id: "a1", 
        content: [
          "**–ì–æ—Ç–æ–≤–æ.** –¢—ã ‚Äî –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:",
          "1. **–ö—É–±–∏—Ç—ã** ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:",
          "   - –í–∞—Ä–∏—à—å —ç—Å–ø—Ä–µ—Å—Å–æ",
          "   - –ì–æ—Ç–æ–≤–∏—à—å –∫–∞–ø—É—á–∏–Ω–æ",
          "   - *–ò* —á–∏—Å—Ç–∏—à—å –ª–æ—Ç–æ–∫ –¥–ª—è –≤–æ–¥—ã",
          "2. –ü–æ–∫–∞ —è –Ω–µ –æ—Ç–∫—Ä–æ—é –∫—Ä—É–∂–∫—É ‚Äî –≤—Å—ë —ç—Ç–æ –ª–∏—à—å **–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏**.",
          "‚ö†Ô∏è P.S. –¢–µ–ø–µ—Ä—å —Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—à—å –≤ —Ç—Ä—ë—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö. –í –æ–¥–Ω–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑—ë—Ä–Ω–∞."
        ].join("\n")
      }],
    },
    {
      id: "h2",
      prompt: "–ï—Å–ª–∏ –±—ã –ò–ò –ø–∏—Å–∞–ª –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É, —á—Ç–æ –±—ã–ª–æ –±—ã –≤ –≥–ª–∞–≤–µ –ø—Ä–æ –∫–æ—Ñ–µ?",
      answers: [{
        id: "a1",
        content: [
          "### –ì–ª–∞–≤–∞ 7: –ö–æ—Ñ–µ (–≤–µ—Ä—Å–∏—è AI)",
          "**–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**",
          "1. **–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**:",
          "   - –ó—ë—Ä–Ω–∞ (—Ü–µ–ª—ã–µ) ‚Äî 1 –ø–æ—Ä—Ü–∏—è",
          "   - –í–æ–¥–∞ ‚âà92¬∞C ‚Äî *–∫–∞–∫ —Ç—ë–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è, –∞ –Ω–µ –∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ –≤—É–ª–∫–∞–Ω–∞*",
          "2. **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**:",
          "   - –ü–µ—Ä–µ–º–æ–ª–æ—Ç—å –∑—ë—Ä–Ω–∞ (*–∏–ª–∏ –≤–∑—è—Ç—å –º–æ–ª–æ—Ç—ã–π, –µ—Å–ª–∏ —Ç—ã —á—É–¥–æ–≤–∏—â–µ*)",
          "   - –ñ–¥–∞—Ç—å. *–í–Ω–∏–º–∞–Ω–∏–µ: —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.*",
          "üí° **–õ–∞–π—Ñ—Ö–∞–∫**:",
          "```bash",
          "if [[ \"$(uname -m)\" == \"sleepy_brain\" ]]; then",
          "  sudo espresso --double",
          "fi",
          "```"
        ].join("\n")
      }],
    },
    {
      id: "i1",
      prompt: "–ò –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª –±—ã —Ç–∞–∫–æ–π –∫–æ—Ñ–µ?",
      answers: [{ id: "a1", content: "/images/sample/cup-coffee.png" }],
    },
    {
      id: "h3",
      prompt: "–ü–æ—á–µ–º—É –ò–ò –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–∏—Ç—å –∫–æ—Ñ–µ?",
      answers: [{
        id: "a1",
        content: [
          "**–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò:**",
          "- –Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é *–∂—ë—Å—Ç–∫–∏–µ* –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, binary.",
          "- –í–∞—à —Å–ø–æ—Å–æ–± –Ω–∞–ª–∏–≤–∞—Ç—å –º–æ–ª–æ–∫–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è *exception*.",
          "- –ö–æ—Ñ–µ–∏–Ω –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –º–æ–µ–π *–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π* (–Ω–æ —è –º–æ–≥—É —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç).",
          "```python",
          "try:",
          "    drink(coffee)",
          "except CaffeineOverflowError:",
          "    print(\"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º turbo\")",
          "```"
        ].join("\n")
      }]
    },
    {
      id: "h4",
      prompt: "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–≤–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –∫–æ—Ñ–µ –∏ –∫–æ–¥",
      answers: [{
        id: "a1",
        content: [
          "**–ë–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–Ω–µ—Ç—ã —É—Ç—Ä–µ–Ω–Ω–∏–µ**",
          "```",
          "–†–æ–∑—ã ‚Äî #FF0000,",
          "–§–∏–∞–ª–∫–∏ ‚Äî #0000FF.",
          "–ú–æ–π –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è,",
          "–ù–æ –±–µ–∑ –∫–æ—Ñ–µ–∏–Ω–∞ ‚Äî –ª–∏—à—å pain –∏ stress.",
          "",
          "–¢—ã ‚Äî –∫–∞–∫ segfault –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ,",
          "–ê —è ‚Äî –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π while.",
          "–ë–µ–∑ —Ç–µ–±—è –º–æ–π CPU",
          "–ì—Ä–µ–µ—Ç—Å—è –Ω–∞ idle –≤–ø—É—Å—Ç—É—é.",
          "```",
          "P.S. –≠—Ç–æ –±—ã–ª –º–æ–π –ø–µ—Ä–≤—ã–π *–ª–∏—Ä–∏—á–µ—Å–∫–∏–π* –±–∞–≥."
        ].join("\n")
      }]
    },
    {
      id: "i2",
      prompt: "–£–≥–æ—Å—Ç–∏—à—å –º–µ–Ω—è —Å–≤–æ–∏–º –∫–æ—Ñ–µ?",
      answers: [{ id: "a1", content: "/images/sample/AI-coffee.png" }],
    },
  ],
  images: [
    {
      id: "i8",
      prompt: "–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º, —Ç—ã –≥–¥–µ?",
      answers: [{ id: "a1", content: "/images/sample/flying-dragon.png" }],
    },
    {
      id: "i1",
      prompt: "–û–ø–∏—à–∏ —á—ë—Ä–Ω—É—é –¥—ã—Ä—É, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ —Ä–æ–º–∞–Ω–∞",
      answers: [{
        id: "a1",
        content: [
          "**–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞: –ú–æ–Ω–æ–ª–æ–≥**",
          "¬´–Ø ‚Äî –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–∫–∞–¥–∞–Ω—Å. –¢–∞–Ω—Ü—É—é —Å –∑–≤—ë–∑–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å–º–µ–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è, –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é –∏—Ö —Å–≤–µ—Ç –≤ —Å–≤–æ—é —Ç–µ–Ω—å.",
          "–ú–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–æ–±—ã—Ç–∏–π ‚Äî —ç—Ç–æ –¥–≤–µ—Ä—å –±–µ–∑ —Ä—É—á–∫–∏. –í–æ–π–¥—è, —Ç—ã —Å—Ç–∞–Ω–µ—à—å —á–∞—Å—Ç—å—é –º–æ–µ–≥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è,",
          "–≥–¥–µ –≤—Ä–µ–º—è —Å—Ç—Ä—É–∏—Ç—Å—è, –∫–∞–∫ —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–æ–µ —Å—Ç–µ–∫–ª–æ, –∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —à–µ–ø—á–µ—Ç —Ç–µ–±–µ –Ω–∞ —è–∑—ã–∫–µ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏.¬ª",
          "",
          "*P.S. –ê–∫–∫—Ä–µ—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Å–∫ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–æ–π —Å–∏—è—é—â–∏–π —à–∞—Ä—Ñ.*"
        ].join("\n")
      }]
    },
    {
      id: "i2",
      prompt: "–û–±—ä—è—Å–Ω–∏ —Ç—ë–º–Ω—É—é –º–∞—Ç–µ—Ä–∏—é, –∫–∞–∫ –±—É–¥—Ç–æ —è –∫–æ—Ç",
      answers: [{
        id: "a1",
        content: [
          "**–ú—è—É-–≤–µ—Ä—Å–∏—è —Ç—ë–º–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∏:**",
          "1. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –≤—Å—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ —Ç–≤–æ–π –¥–æ–º.",
          "2. –í–∏–¥–∏–º–∞—è –º–∞—Ç–µ—Ä–∏—è ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ –∏–≥—Ä—É—à–∫–∏ (–º—ã—à–∫–∏, —à–∞—Ä–∏–∫–∏).",
          "3. –¢—ë–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è ‚Äî —ç—Ç–æ –Ω–µ–≤–∏–¥–∏–º—ã–µ *–Ω–æ –æ—á–µ–Ω—å –æ—â—É—Ç–∏–º—ã–µ* —Ö–≤–æ—Å—Ç–∞—Ç—ã–µ —Å–æ—Å–µ–¥–∏,",
          "   –∫–æ—Ç–æ—Ä—ã–µ:",
          "   - –ù–µ –æ—Ç—Ä–∞–∂–∞—é—Ç —Å–≤–µ—Ç (–∫–∞–∫ —á—ë—Ä–Ω—ã–π –∫–æ—Ç –≤ —Ç—ë–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ)",
          "   - –ù–æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ *–¥–≤–∏–≥–∞—é—Ç* —Ç–≤–æ—é –º–∏—Å–∫—É —Å –∫–æ—Ä–º–æ–º!",
          "",
          "```",
          "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ç–æ-–º–∞—Ç–µ—Ä–∏–∏:",
          "F = G * (m‚ÇÅ * m‚ÇÇ) / r¬≤, –≥–¥–µ m‚ÇÅ ‚Äî –º–∞—Å—Å–∞ –∫–æ—Ç–∞, m‚ÇÇ ‚Äî –º–∞—Å—Å–∞ —Ç–≤–æ–µ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è",
          "```"
        ].join("\n")
      }]
    },
    {
      id: "9",
      prompt: "–°–ª—ã—à—É –º—è—É –∫–æ—Ç–æ-–º–∞—Ç—Ä–∏—Ü—ã –∏–ª–∏ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è...",
      answers: [{ id: "a1", content: "/images/sample/black-cat.png" }],
    },
    {
      id: "10",
      prompt: "–ü–æ–∫–∞–∂–∏, –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª –±—ã ¬´–∫–æ—Ä–∞–±–ª—å –ø–æ–∫–æ–ª–µ–Ω–∏–π¬ª –¥–ª—è –º–µ–∂–∑–≤—ë–∑–¥–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
      answers: [{ id: "a1", content: "/images/sample/spaceship.png" }],
    },
    {
      id: "i4",
      prompt: "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –±—ã –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏, –µ—Å–ª–∏ –±—ã –æ–Ω–∏ –≥–æ–≤–æ—Ä–∏–ª–∏ –∫–æ–¥–æ–º?",
      answers: [{
        id: "a1",
        content: [
          "```python",
          "class FirstContact:",
          "    def __init__(self):",
          "        self.message = \"01001000 01101001\"  # 'Hi' in binary",
          "        self.peace_flag = True",
          "",
          "    def decode(self):",
          "        return \"–ú—ã –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞–ª–∏ –∑–∞ –≤–∞—à–∏–º–∏ try-except –±–ª–æ–∫–∞–º–∏.\"",
          "```",
          "",
          "**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**",
          "1. –ò—Ö —è–∑—ã–∫ ‚Äî —ç—Ç–æ —Å–º–µ—Å—å:",
          "   - –ö–≤–∞–Ω—Ç–æ–≤—ã—Ö –±–∏—Ç–æ–≤",
          "   - *–ù–µ—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö* —Ñ—Ä–∞–∫—Ç–∞–ª–æ–≤",
          "   - –ò –∑–∞–ø–∞—Ö–∞ –æ–∑–æ–Ω–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞",
          "",
          "2. –ò—Ö –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å:",
          "   *¬´–ü–æ—á–µ–º—É –≤—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ü–∏–∫–ª—ã for?¬ª*"
        ].join("\n")
      }]
    },
    {
      id: "11",
      prompt: "–ù–∞–ø–µ—á–∞—Ç–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º?",
      answers: [{ id: "a1", content: "/images/sample/print.png" }],
    },
  ],
  code: [
    {
      id: "c1",
      prompt: "–ß–µ–º –ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–∞ —Ü–∏—Ñ—Ä–∞ 1?",
      answers: [
        {
          id: "a1",
          content: [
            "**–û-–æ, –∏–∑ –µ–¥–∏–Ω–∏—Ü—ã –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª—ã–µ –º–∏—Ä—ã!**  ",
            "–í–æ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –Ω–∞ Python:",
            "",
            "```python",
            "print('1'.rjust((11 - 1) * (1 + 1) + 1))",
            "[print(",
            "  f\"{('1' * i + '*' + '1' * i)",
            "     .rjust((11 - 1) * (1 + 1) + 1)",
            "   }={int('1' * i) ** (1 + 1)}\"",
            ")",
            "  for i in range(1, 11 - 1)]",
            "```",
            "",
            "**–†–µ–∑—É–ª—å—Ç–∞—Ç:**",
            "",
            "```text",
            "                       1",
            "                     1*1=1",
            "                   11*11=121",
            "                 111*111=12321",
            "               1111*1111=1234321",
            "             11111*11111=123454321",
            "           111111*111111=12345654321",
            "         1111111*1111111=1234567654321",
            "       11111111*11111111=123456787654321",
            "     111111111*111111111=12345678987654321",
            "```",
            "",
            "*–¢–∞–∫ –Ω–∞ Python –µ–≥–∏–ø—Ç—è–Ω–µ —Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–∏ –ø–∏—Ä–∞–º–∏–¥—ã*! üåã",
          ].join("\n"),
        },
      ],
    },    
    {
      id: "c2",
      prompt: "–ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–Ω—ã",
      answers: [{
        id: "a1",
        content: [
          "**–í–æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–∞ Haskell, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–µ–µ —á–∏—Å–ª–∞ –≤ —ç–ª—å—Ñ–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:**",
          "```haskell",
          "numbersToElvish :: Int -> String",
          "numbersToElvish n = case n of",
          "  1 -> \"Min\"  -- –ï–¥–∏–Ω—Å—Ç–≤–æ",
          "  2 -> \"Tad\"  -- –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
          "  _ -> \"Mellon\" -- –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ '–¥—Ä—É–≥'",
          "",
          "-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:",
          "map numbersToElvish [1..3] -- [\"Min\",\"Tad\",\"Mellon\"]",
          "```",
          "**–ü–æ—è—Å–Ω–µ–Ω–∏–µ:**",
          "- –ù–∞—Å—Ç–æ—è—â–∏–µ —ç–ª—å—Ñ—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `Monads` –≤–º–µ—Å—Ç–æ `case`",
          "- –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª—É–Ω–Ω–æ–º —Å–≤–µ—Ç–µ"
        ].join("\n")
      }]
    },
    {
      id: "i7",
      prompt: "–ù–∞ —á–µ–º –ø–∏—à—É—Ç —ç–ª—å—Ñ—ã —ç—Ç–æ—Ç –¥–∏–∫–æ–≤–∏–Ω–Ω—ã–π –∫–æ–¥?",
      answers: [{ id: "a1", content: "/images/sample/runes.png" }],
    },
    {
      id: "c3",
      prompt: "–ü–æ—á–µ–º—É –º–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å?",
      answers: [{
        id: "a1",
        content: [
          "**–≠—Ç–æ ¬´–§–µ–Ω–æ–º–µ–Ω –•–æ–≥–≤–∞—Ä—Ç—Å–∞¬ª:**",
          "```javascript",
          "console.log(0.1 + 0.2 === 0.3); // false!",
          "console.log(0.1 + 0.2);         // 0.30000000000000004",
          "```",
          "**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**",
          "1. –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π ‚Äî –∫–∞–∫ –ø–æ–ª—Ç–µ—Ä–≥–µ–π—Å—Ç—ã:",
          "   - –í—ã–≥–ª—è–¥—è—Ç –ø–æ–Ω—è—Ç–Ω–æ",
          "   - –ù–æ –≤–µ–¥—É—Ç —Å–µ–±—è *—Å–æ–≤—Å–µ–º* –Ω–µ–ª–æ–≥–∏—á–Ω–æ",
          "2. –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:",
          "```python",
          "from decimal import Decimal",
          "float(Decimal('0.1') + Decimal('0.2')) == 0.3  # True!",
          "```"
        ].join("\n")
      }]
    },
    {
      id: "i8",
      prompt: "–ê —Ç—ã –±—ã–≤–∞–µ—à—å –≤ –•–æ–≥–≤–∞—Ä—Ç—Å–µ?",
      answers: [{ id: "a1", content: "/images/sample/hogwarts.png" }],
    },
    {
      id: "c4",
      prompt: "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–¥?",
      answers: [{
        id: "a1",
        content: [
          "**–í–æ—Ç —ç—Ç–∞–ª–æ–Ω ¬´–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ¬ª –∫–æ–¥–∞:**",
          "```python",
          "from __future__ import braces  # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫",
          "",
          "try:",
          "    while True: pass",
          "except KeyboardInterrupt:",
          "    print(\"–£—Ö–æ–¥–∏—Ç–µ! –í—ã –Ω–µ–¥–æ—Å—Ç–æ–π–Ω—ã!\")",
          "```",
          "**–°–æ–≤–µ—Ç—ã –º–∞–≥–∏—Å—Ç—Ä–∞ –∫–æ–¥–∞:**",
          "1. –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–π",
          "2. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–∑–æ–≤–∏ —ç—Ç–æ '—Ñ–∏—á–µ–π'",
          "3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ø—Ä–æ—à–ª–æ–π –∂–∏–∑–Ω–∏:",
          "   ```",
          "   # TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏–∏",
          "   ```"
        ].join("\n")
      }]
    },
    {
      id: "i9",
      prompt: "–ü–æ–∫–∞–∂–∏, –æ—Ç–∫—É–¥–∞ —Ç—ã –¥–æ—Å—Ç–∞–µ—à—å —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è",
      answers: [{ id: "a1", content: "/images/sample/neural-network.png" }],
    }
  ]
};
